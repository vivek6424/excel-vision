<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Visualization Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --success: #4cc9f0;
            --danger: #f72585;
            --dark: #212529;
            --light: #f8f9fa;
            --gray: #6c757d;
            --sidebar-width: 250px;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fb;
            color: var(--dark);
        }
        
        .app-container {
            display: flex;
            min-height: 100vh;
        }
        
        /* Sidebar */
        .sidebar {
            width: var(--sidebar-width);
            background: var(--dark);
            color: white;
            position: fixed;
            height: 100vh;
            transition: all 0.3s;
            z-index: 1000;
        }
        
        .sidebar-header {
            padding: 20px;
            background: var(--primary);
            text-align: center;
        }
        
        .sidebar-menu {
            padding: 20px 0;
        }
        
        .sidebar-menu ul {
            list-style: none;
        }
        
        .sidebar-menu li {
            padding: 10px 20px;
            transition: all 0.3s;
        }
        
        .sidebar-menu li:hover {
            background: var(--primary);
            cursor: pointer;
        }
        
        .sidebar-menu li.active {
            background: var(--secondary);
            border-left: 4px solid var(--success);
        }
        
        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 20px;
        }
        
        /* Header */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }
        
        /* Cards */
        .card {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        /* Forms */
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }
        
        /* Buttons */
        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s;
        }
        
        .btn-primary {
            background: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background: var(--secondary);
        }
        
        .btn-success {
            background: var(--success);
            color: white;
        }
        
        .btn-danger {
            background: var(--danger);
            color: white;
        }
        
        /* Visualization Area */
        .visualization-area {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            height: 400px;
            position: relative;
        }
        
        /* File Upload */
        .file-upload {
            border: 2px dashed #ddd;
            border-radius: 10px;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .file-upload:hover {
            border-color: var(--primary);
        }
        
        /* Table */
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        .data-table th, .data-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        .data-table th {
            background-color: #f8f9fa;
            font-weight: 600;
        }
        
        .data-table tr:hover {
            background-color: #f5f5f5;
        }
        
        /* Tabs */
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid #ddd;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .tab.active {
            border-bottom: 3px solid var(--primary);
            font-weight: bold;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Login Page */
        .login-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(135deg, #4361ee 0%, #3a0ca3 100%);
        }
        
        .login-form {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            width: 400px;
            max-width: 90%;
        }
        
        .login-form h2 {
            text-align: center;
            margin-bottom: 20px;
            color: var(--dark);
        }
        
        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 2000;
            justify-content: center;
            align-items: center;
        }
        
        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            max-width: 90%;
            max-height: 80%;
            overflow: auto;
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--gray);
        }
        
        /* Loading spinner */
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left: 4px solid var(--primary);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 70px;
            }
            
            .sidebar-header h3, .sidebar-menu span {
                display: none;
            }
            
            .main-content {
                margin-left: 70px;
            }
        }
    </style>
</head>
<body>
    <!-- Login Screen -->
    <div id="loginScreen" class="login-container">
        <div class="login-form">
            <h2>Data Visualization Dashboard</h2>
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" class="form-control" placeholder="Enter your email">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" class="form-control" placeholder="Enter your password">
            </div>
            <div class="form-group">
                <label for="role">Login as</label>
                <select id="role" class="form-control">
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                </select>
            </div>
            <button id="loginBtn" class="btn btn-primary" style="width: 100%;">Login</button>
            <p style="text-align: center; margin-top: 15px; color: var(--gray);">
                Demo: Use any email/password to login
            </p>
        </div>
    </div>

    <!-- File View Modal -->
    <div id="fileViewModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">File Content</h3>
                <button class="close-btn" id="closeModal">&times;</button>
            </div>
            <div id="modalBody">
                <!-- File content will be displayed here -->
            </div>
        </div>
    </div>

    <!-- Main Application -->
    <div id="app" class="app-container" style="display: none;">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>DataViz Dashboard</h3>
            </div>
            <div class="sidebar-menu">
                <ul>
                    <li class="active" data-tab="dashboard"><span>📊</span> Dashboard</li>
                    <li data-tab="upload"><span>📁</span> Upload Data</li>
                    <li data-tab="visualize"><span>📈</span> Visualize</li>
                    <li data-tab="history"><span>🕒</span> History</li>
                    <li data-tab="admin" id="adminTab" style="display: none;"><span>⚙️</span> Admin Panel</li>
                    <li id="logoutBtn"><span>🚪</span> Logout</li>
                </ul>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <div class="header">
                <h2 id="currentPage">Dashboard</h2>
                <div class="user-info">
                    <div class="user-avatar" id="userAvatar">U</div>
                    <div>
                        <div id="userEmail">user@example.com</div>
                        <div id="userRole" style="font-size: 12px; color: var(--gray);">User</div>
                    </div>
                </div>
            </div>

            <!-- Dashboard Tab -->
            <div id="dashboard" class="tab-content active">
                <div class="card">
                    <div class="card-header">
                        <h3>Welcome to Data Visualization Dashboard</h3>
                    </div>
                    <p>This application allows you to upload Excel files, visualize data using various chart types, and generate AI-powered insights.</p>
                    <div style="display: flex; gap: 20px; margin-top: 20px;">
                        <div class="card" style="flex: 1;">
                            <h4>📁 Upload Data</h4>
                            <p>Upload Excel files and convert them to structured data</p>
                        </div>
                        <div class="card" style="flex: 1;">
                            <h4>📈 Visualize</h4>
                            <p>Create various charts and 3D visualizations</p>
                        </div>
                        <div class="card" style="flex: 1;">
                            <h4>🤖 AI Analysis</h4>
                            <p>Get natural language insights from your data</p>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h3>Recent Visualizations</h3>
                    </div>
                    <div id="recentViz" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px;">
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
                            <h4>Sales Data</h4>
                            <p>Bar Chart - Created 2 days ago</p>
                        </div>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
                            <h4>User Growth</h4>
                            <p>Line Chart - Created 5 days ago</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Upload Tab -->
            <div id="upload" class="tab-content">
                <div class="card">
                    <div class="card-header">
                        <h3>Upload Excel File</h3>
                    </div>
                    <div class="file-upload" id="dropZone">
                        <p>Drag & Drop your Excel file here</p>
                        <p>or</p>
                        <input type="file" id="fileInput" accept=".xlsx, .xls" style="display: none;">
                        <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()">Browse Files</button>
                    </div>
                    <div id="uploadStatus"></div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h3>Uploaded Files</h3>
                    </div>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Filename</th>
                                <th>Size</th>
                                <th>Upload Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="fileList">
                            <tr>
                                <td>sales_data.xlsx</td>
                                <td>2.4 MB</td>
                                <td>2023-10-15</td>
                                <td>
                                    <button class="btn btn-primary" onclick="viewFile('sales_data.xlsx', '2.4 MB', '2023-10-15')">View</button>
                                    <button class="btn btn-danger" onclick="deleteFile(this, 'sales_data.xlsx')">Delete</button>
                                </td>
                            </tr>
                            <tr>
                                <td>user_stats.xlsx</td>
                                <td>1.2 MB</td>
                                <td>2023-10-10</td>
                                <td>
                                    <button class="btn btn-primary" onclick="viewFile('user_stats.xlsx', '1.2 MB', '2023-10-10')">View</button>
                                    <button class="btn btn-danger" onclick="deleteFile(this, 'user_stats.xlsx')">Delete</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Visualize Tab -->
            <div id="visualize" class="tab-content">
                <div class="card">
                    <div class="card-header">
                        <h3>Create Visualization</h3>
                    </div>
                    <div style="display: flex; gap: 20px; flex-wrap: wrap;">
                        <div style="flex: 1; min-width: 300px;">
                            <div class="form-group">
                                <label for="dataSource">Select Data</label>
                                <select id="dataSource" class="form-control">
                                    <option value="sales">Sales Data</option>
                                    <option value="users">User Statistics</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="chartType">Chart Type</label>
                                <select id="chartType" class="form-control">
                                    <option value="bar">Bar Chart</option>
                                    <option value="line">Line Chart</option>
                                    <option value="pie">Pie Chart</option>
                                    <option value="scatter">Scatter Plot</option>
                                    <option value="3d">3D Scatter Plot</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="xAxis">X-Axis</label>
                                <select id="xAxis" class="form-control">
                                    <option value="month">Month</option>
                                    <option value="product">Product</option>
                                    <option value="region">Region</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="yAxis">Y-Axis</label>
                                <select id="yAxis" class="form-control">
                                    <option value="sales">Sales</option>
                                    <option value="revenue">Revenue</option>
                                    <option value="growth">Growth %</option>
                                </select>
                            </div>
                            <button class="btn btn-primary" id="generateChart">Generate Chart</button>
                            <button class="btn btn-success" id="saveViz">Save Visualization</button>
                        </div>
                        <div style="flex: 2; min-width: 300px;">
                            <div class="visualization-area">
                                <canvas id="chartCanvas"></canvas>
                                <div id="threeContainer" style="width: 100%; height: 100%; display: none;"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h3>AI Analysis</h3>
                    </div>
                    <div id="aiAnalysis">
                        <p>Generate insights based on your data visualization</p>
                        <button class="btn btn-primary" id="generateAnalysis">Generate AI Analysis</button>
                        <div id="analysisResult" style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; display: none;">
                            <h4>AI Analysis Result</h4>
                            <div id="analysisLoading" class="spinner" style="display: none;"></div>
                            <p id="analysisText"></p>
                            <button class="btn btn-success" id="downloadPdf" style="display: none;">Download as PDF</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- History Tab -->
            <div id="history" class="tab-content">
                <div class="card">
                    <div class="card-header">
                        <h3>Visualization History</h3>
                    </div>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="historyList">
                            <tr>
                                <td>Monthly Sales Report</td>
                                <td>Bar Chart</td>
                                <td>2023-10-15</td>
                                <td>
                                    <button class="btn btn-primary">View</button>
                                    <button class="btn btn-success">Export</button>
                                    <button class="btn btn-danger">Delete</button>
                                </td>
                            </tr>
                            <tr>
                                <td>User Growth Trend</td>
                                <td>Line Chart</td>
                                <td>2023-10-10</td>
                                <td>
                                    <button class="btn btn-primary">View</button>
                                    <button class="btn btn-success">Export</button>
                                    <button class="btn btn-danger">Delete</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Admin Tab -->
            <div id="admin" class="tab-content">
                <div class="card">
                    <div class="card-header">
                        <h3>Admin Panel</h3>
                    </div>
                    <div class="tabs">
                        <div class="tab active" data-admin-tab="users">Users</div>
                        <div class="tab" data-admin-tab="files">Files</div>
                        <div class="tab" data-admin-tab="analytics">Analytics</div>
                    </div>

                    <div id="adminUsers" class="admin-tab-content">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>User ID</th>
                                    <th>Email</th>
                                    <th>Role</th>
                                    <th>Joined</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>admin@example.com</td>
                                    <td>Admin</td>
                                    <td>2023-09-01</td>
                                    <td>
                                        <button class="btn btn-primary">Edit</button>
                                        <button class="btn btn-danger">Delete</button>
                                    </td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>user1@example.com</td>
                                    <td>User</td>
                                    <td>2023-09-15</td>
                                    <td>
                                        <button class="btn btn-primary">Edit</button>
                                        <button class="btn btn-danger">Delete</button>
                                    </td>
                                </tr>
                                <tr>
                                    <td>3</td>
                                    <td>user2@example.com</td>
                                    <td>User</td>
                                    <td>2023-10-01</td>
                                    <td>
                                        <button class="btn btn-primary">Edit</button>
                                        <button class="btn btn-danger">Delete</button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div id="adminFiles" class="admin-tab-content" style="display: none;">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Filename</th>
                                    <th>User</th>
                                    <th>Size</th>
                                    <th>Uploaded</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>sales_data.xlsx</td>
                                    <td>user1@example.com</td>
                                    <td>2.4 MB</td>
                                    <td>2023-10-15</td>
                                    <td>
                                        <button class="btn btn-primary">View</button>
                                        <button class="btn btn-danger">Delete</button>
                                    </td>
                                </tr>
                                <tr>
                                    <td>user_stats.xlsx</td>
                                    <td>user2@example.com</td>
                                    <td>1.2 MB</td>
                                    <td>2023-10-10</td>
                                    <td>
                                        <button class="btn btn-primary">View</button>
                                        <button class="btn btn-danger">Delete</button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div id="adminAnalytics" class="admin-tab-content" style="display: none;">
                        <div style="display: flex; gap: 20px; margin-bottom: 20px;">
                            <div class="card" style="flex: 1;">
                                <h4>Total Users</h4>
                                <p style="font-size: 24px; font-weight: bold;">3</p>
                            </div>
                            <div class="card" style="flex: 1;">
                                <h4>Total Files</h4>
                                <p style="font-size: 24px; font-weight: bold;">12</p>
                            </div>
                            <div class="card" style="flex: 1;">
                                <h4>Total Visualizations</h4>
                                <p style="font-size: 24px; font-weight: bold;">28</p>
                            </div>
                        </div>
                        <div class="card">
                            <h4>Recent Activity</h4>
                            <ul style="list-style: none;">
                                <li style="padding: 10px; border-bottom: 1px solid #eee;">User1 created a new visualization (Bar Chart)</li>
                                <li style="padding: 10px; border-bottom: 1px solid #eee;">User2 uploaded sales_data.xlsx</li>
                                <li style="padding: 10px; border-bottom: 1px solid #eee;">Admin updated user permissions</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Sample data for visualizations
        const sampleData = {
            sales: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                values: [65, 59, 80, 81, 56, 55],
                xLabel: 'Month',
                yLabel: 'Sales'
            },
            users: {
                labels: ['Q1', 'Q2', 'Q3', 'Q4'],
                values: [100, 120, 180, 210],
                xLabel: 'Quarter',
                yLabel: 'Users'
            }
        };

        // AI Insights data
        const insightsData = {
            sales: {
                bar: "The bar chart shows sales performance over six months. April had the highest sales at 81 units, while June had the lowest at 55 units. There's a noticeable peak in April, suggesting a successful marketing campaign or seasonal demand during that period.",
                line: "The line chart illustrates sales trends across six months. After a dip in February, sales increased steadily, peaking in April before declining in May and June. This pattern suggests the need to investigate what caused the April peak and the subsequent decline.",
                pie: "The pie chart displays sales distribution by month. April represents the largest share at 19.5% of total sales, while June accounts for the smallest share at 13.2%. This visualization helps identify which months contribute most to overall revenue.",
                scatter: "The scatter plot shows the relationship between time and sales. The clustering of points in the higher values during March-April indicates a period of strong performance, while the lower values in February and June may require attention to underlying causes.",
                '3d': "The 3D visualization provides a spatial representation of sales data across multiple dimensions. This perspective can reveal patterns not easily visible in 2D charts, such as clusters of high-performance periods or outliers that merit further investigation."
            },
            users: {
                bar: "The bar chart displays user growth by quarter. Q4 shows the highest number of users at 210, representing a 110% increase from Q1. The consistent upward trend indicates successful user acquisition and retention strategies.",
                line: "The line chart demonstrates steady user growth throughout the year. The most significant growth occurred between Q2 and Q3, with a 50% increase. This acceleration suggests effective implementation of growth strategies during that period.",
                pie: "The pie chart illustrates user distribution across quarters. Q4 accounts for 34.4% of total users, indicating strong end-of-year performance. This visualization helps understand seasonal patterns in user acquisition.",
                scatter: "The scatter plot reveals the relationship between time and user growth. The upward trajectory of points shows consistent growth, with the steepest increase between Q2 and Q3. This pattern suggests successful growth initiatives during that period.",
                '3d': "The 3D visualization offers a multidimensional view of user growth data. This perspective can help identify correlations between different variables that may not be apparent in traditional 2D charts, potentially revealing insights about user behavior patterns."
            }
        };

        // DOM Elements
        const loginScreen = document.getElementById('loginScreen');
        const app = document.getElementById('app');
        const loginBtn = document.getElementById('loginBtn');
        const logoutBtn = document.getElementById('logoutBtn');
        const userEmail = document.getElementById('userEmail');
        const userRole = document.getElementById('userRole');
        const userAvatar = document.getElementById('userAvatar');
        const adminTab = document.getElementById('adminTab');
        const currentPage = document.getElementById('currentPage');
        const tabContents = document.querySelectorAll('.tab-content');
        const menuItems = document.querySelectorAll('.sidebar-menu li');
        const generateChartBtn = document.getElementById('generateChart');
        const chartCanvas = document.getElementById('chartCanvas');
        const threeContainer = document.getElementById('threeContainer');
        const chartType = document.getElementById('chartType');
        const generateAnalysisBtn = document.getElementById('generateAnalysis');
        const analysisResult = document.getElementById('analysisResult');
        const analysisText = document.getElementById('analysisText');
        const analysisLoading = document.getElementById('analysisLoading');
        const downloadPdfBtn = document.getElementById('downloadPdf');
        const adminTabs = document.querySelectorAll('.admin-tab-content');
        const adminTabButtons = document.querySelectorAll('[data-admin-tab]');
        const fileViewModal = document.getElementById('fileViewModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');
        const closeModal = document.getElementById('closeModal');

        // Current user state
        let currentUser = null;
        let currentChartType = 'bar';
        let currentDataSource = 'sales';

        // Login functionality
        loginBtn.addEventListener('click', () => {
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const role = document.getElementById('role').value;
            
            if (email && password) {
                currentUser = {
                    email,
                    role
                };
                
                // Update UI with user info
                userEmail.textContent = email;
                userRole.textContent = role.charAt(0).toUpperCase() + role.slice(1);
                userAvatar.textContent = email.charAt(0).toUpperCase();
                
                // Show admin tab if user is admin
                if (role === 'admin') {
                    adminTab.style.display = 'block';
                }
                
                // Switch to app view
                loginScreen.style.display = 'none';
                app.style.display = 'flex';
            } else {
                alert('Please enter email and password');
            }
        });

        // Logout functionality
        logoutBtn.addEventListener('click', () => {
            currentUser = null;
            app.style.display = 'none';
            loginScreen.style.display = 'flex';
        });

        // Tab navigation
        menuItems.forEach(item => {
            if (item.dataset.tab) {
                item.addEventListener('click', () => {
                    // Update active menu item
                    menuItems.forEach(i => i.classList.remove('active'));
                    item.classList.add('active');
                    
                    // Show corresponding tab content
                    const tabName = item.dataset.tab;
                    tabContents.forEach(tab => tab.classList.remove('active'));
                    document.getElementById(tabName).classList.add('active');
                    
                    // Update current page title
                    currentPage.textContent = document.querySelector(`[data-tab="${tabName}"]`).textContent;
                });
            }
        });

        // Admin tab navigation
        adminTabButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Update active admin tab
                adminTabButtons.forEach(b => b.classList.remove('active'));
                button.classList.add('active');
                
                // Show corresponding admin tab content
                const tabName = button.dataset.adminTab;
                adminTabs.forEach(tab => tab.style.display = 'none');
                document.getElementById(`admin${tabName.charAt(0).toUpperCase() + tabName.slice(1)}`).style.display = 'block';
            });
        });

        // Generate chart based on selected options
        generateChartBtn.addEventListener('click', () => {
            currentDataSource = document.getElementById('dataSource').value;
            currentChartType = document.getElementById('chartType').value;
            
            if (currentChartType === '3d') {
                create3DScatterPlot();
            } else {
                create2DChart(currentChartType, currentDataSource);
            }
        });

        // Create 2D chart with Chart.js
        function create2DChart(type, dataKey) {
            // Hide 3D container and show canvas
            threeContainer.style.display = 'none';
            chartCanvas.style.display = 'block';
            
            const ctx = chartCanvas.getContext('2d');
            
            // Destroy previous chart if it exists
            if (window.currentChart) {
                window.currentChart.destroy();
            }
            
            const data = sampleData[dataKey];
            
            // Create new chart based on type
            switch (type) {
                case 'bar':
                    window.currentChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: data.labels,
                            datasets: [{
                                label: data.yLabel,
                                data: data.values,
                                backgroundColor: 'rgba(67, 97, 238, 0.5)',
                                borderColor: 'rgba(67, 97, 238, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: data.yLabel
                                    }
                                },
                                x: {
                                    title: {
                                        display: true,
                                        text: data.xLabel
                                    }
                                }
                            }
                        }
                    });
                    break;
                    
                case 'line':
                    window.currentChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: data.labels,
                            datasets: [{
                                label: data.yLabel,
                                data: data.values,
                                backgroundColor: 'rgba(76, 201, 240, 0.2)',
                                borderColor: 'rgba(76, 201, 240, 1)',
                                borderWidth: 2,
                                tension: 0.3,
                                fill: true
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: data.yLabel
                                    }
                                },
                                x: {
                                    title: {
                                        display: true,
                                        text: data.xLabel
                                    }
                                }
                            }
                        }
                    });
                    break;
                    
                case 'pie':
                    window.currentChart = new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: data.labels,
                            datasets: [{
                                data: data.values,
                                backgroundColor: [
                                    'rgba(67, 97, 238, 0.5)',
                                    'rgba(76, 201, 240, 0.5)',
                                    'rgba(247, 37, 133, 0.5)',
                                    'rgba(63, 55, 201, 0.5)',
                                    'rgba(33, 37, 41, 0.5)',
                                    'rgba(108, 117, 125, 0.5)'
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                title: {
                                    display: true,
                                    text: `${data.yLabel} Distribution`
                                }
                            }
                        }
                    });
                    break;
                    
                case 'scatter':
                    // For scatter plot, we need x/y coordinates
                    const scatterData = data.values.map((value, index) => ({
                        x: index,
                        y: value
                    }));
                    
                    window.currentChart = new Chart(ctx, {
                        type: 'scatter',
                        data: {
                            datasets: [{
                                label: data.yLabel,
                                data: scatterData,
                                backgroundColor: 'rgba(67, 97, 238, 0.5)',
                                borderColor: 'rgba(67, 97, 238, 1)',
                                borderWidth: 1,
                                pointRadius: 6
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                x: {
                                    type: 'linear',
                                    position: 'bottom',
                                    title: {
                                        display: true,
                                        text: 'Index'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: data.yLabel
                                    }
                                }
                            }
                        }
                    });
                    break;
            }
        }

        // Create 3D scatter plot with Three.js
        function create3DScatterPlot() {
            // Hide canvas and show 3D container
            chartCanvas.style.display = 'none';
            threeContainer.style.display = 'block';
            
            // Clear previous scene if it exists
            if (window.threeScene) {
                threeContainer.innerHTML = '';
            }
            
            // Set up Three.js scene
            const width = threeContainer.clientWidth;
            const height = threeContainer.clientHeight;
            
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ antialias: true });
            
            renderer.setSize(width, height);
            threeContainer.appendChild(renderer.domElement);
            
            // Add some sample data points
            const geometry = new THREE.SphereGeometry(0.2, 32, 32);
            const material = new THREE.MeshBasicMaterial({ color: 0x4361ee });
            
            for (let i = 0; i < 20; i++) {
                const sphere = new THREE.Mesh(geometry, material);
                sphere.position.x = (Math.random() - 0.5) * 10;
                sphere.position.y = (Math.random() - 0.5) * 10;
                sphere.position.z = (Math.random() - 0.5) * 10;
                scene.add(sphere);
            }
            
            // Add axes helpers
            const axesHelper = new THREE.AxesHelper(5);
            scene.add(axesHelper);
            
            // Position camera
            camera.position.z = 15;
            
            // Add lights
            const ambientLight = new THREE.AmbientLight(0x404040);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
            directionalLight.position.set(1, 1, 1);
            scene.add(directionalLight);
            
            // Animation loop
            function animate() {
                requestAnimationFrame(animate);
                
                scene.rotation.x += 0.005;
                scene.rotation.y += 0.005;
                
                renderer.render(scene, camera);
            }
            
            animate();
            
            // Handle window resize
            function onWindowResize() {
                camera.aspect = threeContainer.clientWidth / threeContainer.clientHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(threeContainer.clientWidth, threeContainer.clientHeight);
            }
            
            window.addEventListener('resize', onWindowResize);
            
            // Store reference to scene for cleanup
            window.threeScene = scene;
        }

        // Generate AI analysis
        generateAnalysisBtn.addEventListener('click', () => {
            // Show loading state
            analysisLoading.style.display = 'block';
            analysisText.textContent = "";
            downloadPdfBtn.style.display = 'none';
            analysisResult.style.display = 'block';
            
            // Simulate AI processing with a delay
            setTimeout(() => {
                // Get the appropriate insight based on data source and chart type
                const insight = insightsData[currentDataSource][currentChartType];
                
                // Display the analysis
                analysisText.textContent = insight;
                
                // Hide loading spinner and show download button
                analysisLoading.style.display = 'none';
                downloadPdfBtn.style.display = 'inline-block';
            }, 2000);
        });

        // Download PDF functionality
        downloadPdfBtn.addEventListener('click', () => {
            // Create a new PDF document
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Add title
            doc.setFontSize(20);
            doc.text('Data Analysis Report', 105, 15, { align: 'center' });
            
            // Add date
            doc.setFontSize(12);
            doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 22, { align: 'center' });
            
            // Add chart image
            if (currentChartType !== '3d') {
                // For 2D charts, get the chart as an image
                const chartImage = chartCanvas.toDataURL('image/png', 1.0);
                doc.addImage(chartImage, 'PNG', 15, 30, 180, 100);
            }
            
            // Add analysis text
            doc.setFontSize(14);
            doc.text('AI Analysis:', 15, 140);
            doc.setFontSize(12);
            
            // Split the analysis text into lines that fit the page width
            const analysisLines = doc.splitTextToSize(analysisText.textContent, 180);
            doc.text(analysisLines, 15, 150);
            
            // Save the PDF
            doc.save('data-analysis-report.pdf');
        });

        // File upload handling
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const uploadStatus = document.getElementById('uploadStatus');

        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.style.borderColor = '#4361ee';
            dropZone.style.backgroundColor = '#f0f4ff';
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.style.borderColor = '#ddd';
            dropZone.style.backgroundColor = 'transparent';
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.style.borderColor = '#ddd';
            dropZone.style.backgroundColor = 'transparent';
            
            if (e.dataTransfer.files.length) {
                handleFileUpload(e.dataTransfer.files[0]);
            }
        });

        fileInput.addEventListener('change', () => {
            if (fileInput.files.length) {
                handleFileUpload(fileInput.files[0]);
            }
        });

        function handleFileUpload(file) {
            if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {
                uploadStatus.innerHTML = `<p style="color: green;">Uploading ${file.name}...</p>`;
                
                // Simulate upload process
                setTimeout(() => {
                    uploadStatus.innerHTML = `<p style="color: green;">Successfully uploaded ${file.name}</p>`;
                    
                    // Add to file list
                    const fileList = document.getElementById('fileList');
                    const row = document.createElement('tr');
                    
                    const sizeMB = (file.size / (1024 * 1024)).toFixed(2);
                    const uploadDate = new Date().toLocaleDateString();
                    
                    row.innerHTML = `
                        <td>${file.name}</td>
                        <td>${sizeMB} MB</td>
                        <td>${uploadDate}</td>
                        <td>
                            <button class="btn btn-primary" onclick="viewFile('${file.name}', '${sizeMB} MB', '${uploadDate}')">View</button>
                            <button class="btn btn-danger" onclick="deleteFile(this, '${file.name}')">Delete</button>
                        </td>
                    `;
                    
                    fileList.appendChild(row);
                }, 1500);
            } else {
                uploadStatus.innerHTML = `<p style="color: red;">Please upload only Excel files (.xlsx, .xls)</p>`;
            }
        }

        // View file function
        function viewFile(filename, size, date) {
            modalTitle.textContent = `File Details: ${filename}`;
            modalBody.innerHTML = `
                <p><strong>Filename:</strong> ${filename}</p>
                <p><strong>Size:</strong> ${size}</p>
                <p><strong>Upload Date:</strong> ${date}</p>
                <p><strong>Content Preview:</strong></p>
                <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 10px;">
                    <p>This is a preview of the file content. In a real application, this would display the actual data from the Excel file.</p>
                    <p>For demonstration purposes, we're showing sample data.</p>
                    <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
                        <tr style="background: #e9ecef;">
                            <th style="padding: 8px; border: 1px solid #dee2e6;">Month</th>
                            <th style="padding: 8px; border: 1px solid #dee2e6;">Sales</th>
                            <th style="padding: 8px; border: 1px solid #dee2e6;">Revenue</th>
                        </tr>
                        <tr>
                            <td style="padding: 8px; border: 1px solid #dee2e6;">January</td>
                            <td style="padding: 8px; border: 1px solid #dee2e6;">$12,400</td>
                            <td style="padding: 8px; border: 1px solid #dee2e6;">$10,800</td>
                        </tr>
                        <tr style="background: #f8f9fa;">
                            <td style="padding: 8px; border: 1px solid #dee2e6;">February</td>
                            <td style="padding: 8px; border: 1px solid #dee2e6;">$15,300</td>
                            <td style="padding: 8px; border: 1px solid #dee2e6;">$13,200</td>
                        </tr>
                        <tr>
                            <td style="padding: 8px; border: 1px solid #dee2e6;">March</td>
                            <td style="padding: 8px; border: 1px solid #dee2e6;">$18,900</td>
                            <td style="padding: 8px; border: 1px solid #dee2e6;">$16,500</td>
                        </tr>
                    </table>
                </div>
                <div style="margin-top: 20px;">
                    <button class="btn btn-success" onclick="downloadFile('${filename}')">Download File</button>
                </div>
            `;
            
            fileViewModal.style.display = 'flex';
        }

        // Delete file function
        function deleteFile(button, filename) {
            if (confirm(`Are you sure you want to delete ${filename}?`)) {
                const row = button.parentNode.parentNode;
                row.parentNode.removeChild(row);
                
                // Show confirmation message
                uploadStatus.innerHTML = `<p style="color: green;">Successfully deleted ${filename}</p>`;
            }
        }

        // Download file function
        function downloadFile(filename) {
            alert(`In a real application, this would download the file: ${filename}`);
            // In a real implementation, this would trigger a file download
        }

        // Close modal
        closeModal.addEventListener('click', () => {
            fileViewModal.style.display = 'none';
        });

        // Close modal if clicked outside
        window.addEventListener('click', (e) => {
            if (e.target === fileViewModal) {
                fileViewModal.style.display = 'none';
            }
        });

        // Initialize the dashboard with a default chart
        window.onload = () => {
            create2DChart('bar', 'sales');
        };
    </script>
</body>
</html>
